import streamlit as st
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import os
import sys
import time
import pandas as pd
import json
import plotly.express as px
import plotly.graph_objects as go

# Th√™m th∆∞ m·ª•c g·ªëc v√†o ƒë∆∞·ªùng d·∫´n
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.data import GraphDataset
from src.models import (
    GirvanNewman, Louvain, SpectralCommunity, KMeansCommunity, 
    HierarchicalCommunity, LabelPropagation, InfomapCommunity
)
from src.models import (
    CONGA, CONGO, COPRA, BIGCLAM
)
from src.evaluation import modularity, conductance, nmi, ari, overlapping_nmi, omega_index
from src.visualization import visualize_communities, visualize_overlapping_communities, visualize_interactive

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ trang web
st.set_page_config(
    page_title="Ph√°t hi·ªán c·ªông ƒë·ªìng trong m·∫°ng x√£ h·ªôi",
    page_icon="üîç",
    layout="wide"
)

# Ti√™u ƒë·ªÅ
st.title("Ph√°t hi·ªán c·ªông ƒë·ªìng trong m·∫°ng x√£ h·ªôi")
st.markdown("""
    Demo ·ª©ng d·ª•ng c√°c thu·∫≠t to√°n ph√°t hi·ªán c·ªông ƒë·ªìng trong m·∫°ng x√£ h·ªôi.
    Ch·ªçn b·ªô d·ªØ li·ªáu, thu·∫≠t to√°n v√† c√°c tham s·ªë ƒë·ªÉ xem k·∫øt qu·∫£ ph√°t hi·ªán c·ªông ƒë·ªìng.
""")

# Thanh sidebar
st.sidebar.header("C√†i ƒë·∫∑t")

# T·∫£i d·ªØ li·ªáu
@st.cache_resource
def load_dataset(dataset_name, n=100, k=5, overlap_size=10, p_in=0.3, p_out=0.05):
    """
    T·∫£i b·ªô d·ªØ li·ªáu
    
    Args:
        dataset_name: T√™n b·ªô d·ªØ li·ªáu
        n, k, overlap_size, p_in, p_out: Tham s·ªë cho b·ªô d·ªØ li·ªáu t·ªïng h·ª£p
        
    Returns:
        G: networkx.Graph
        true_communities: Danh s√°ch c√°c c·ªông ƒë·ªìng th·ª±c s·ª± (n·∫øu c√≥)
    """
    dataset = GraphDataset()
    
    if dataset_name == "karate_club":
        G = dataset.load_karate_club()
        true_communities = None
    elif dataset_name == "dolphins":
        G = dataset.load_dolphins()
        true_communities = None
    elif dataset_name == "football":
        G, true_communities = dataset.load_football()
    elif dataset_name == "synthetic":
        G, true_communities = dataset.generate_synthetic_data(n=n, k=k)
    elif dataset_name == "synthetic_overlapping":
        G, true_communities = dataset.generate_overlapping_communities(n=n, k=k, overlap_size=overlap_size, p_in=p_in, p_out=p_out)
    else:
        st.error(f"B·ªô d·ªØ li·ªáu {dataset_name} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£")
        return None, None
    
    return G, true_communities

# L·∫•y danh s√°ch thu·∫≠t to√°n
def get_disjoint_algorithms():
    return {
        "Girvan-Newman": GirvanNewman,
        "Louvain": Louvain,
        "Spectral Clustering": SpectralCommunity,
        "K-means": KMeansCommunity,
        "Hierarchical Clustering": HierarchicalCommunity,
        "Label Propagation": LabelPropagation,
        "Infomap": InfomapCommunity
    }

def get_overlapping_algorithms():
    return {
        "CONGA": CONGA,
        "CONGO": CONGO,
        "COPRA": COPRA,
        "BIGCLAM": BIGCLAM
    }

# Ch·ªçn b·ªô d·ªØ li·ªáu
dataset_options = {
    "karate_club": "Zachary's Karate Club",
    "dolphins": "Dolphins Social Network",
    "football": "American College Football",
    "synthetic": "D·ªØ li·ªáu t·ªïng h·ª£p",
    "synthetic_overlapping": "D·ªØ li·ªáu t·ªïng h·ª£p (c·ªông ƒë·ªìng ch·ªìng ch√©o)"
}

dataset_name = st.sidebar.selectbox(
    "Ch·ªçn b·ªô d·ªØ li·ªáu:",
    list(dataset_options.keys()),
    format_func=lambda x: dataset_options[x]
)

# Tham s·ªë cho b·ªô d·ªØ li·ªáu t·ªïng h·ª£p
if dataset_name in ["synthetic", "synthetic_overlapping"]:
    n = st.sidebar.slider("S·ªë l∆∞·ª£ng ƒë·ªânh (n):", min_value=20, max_value=500, value=100, step=10)
    k = st.sidebar.slider("S·ªë l∆∞·ª£ng c·ªông ƒë·ªìng (k):", min_value=2, max_value=10, value=5)
    p_in = st.sidebar.slider("X√°c su·∫•t li√™n k·∫øt trong c·ªông ƒë·ªìng (p_in):", min_value=0.1, max_value=1.0, value=0.3, step=0.05)
    p_out = st.sidebar.slider("X√°c su·∫•t li√™n k·∫øt ngo√†i c·ªông ƒë·ªìng (p_out):", min_value=0.0, max_value=0.3, value=0.05, step=0.01)
    
    if dataset_name == "synthetic_overlapping":
        overlap_size = st.sidebar.slider("K√≠ch th∆∞·ªõc ph·∫ßn ch·ªìng ch√©o:", min_value=1, max_value=50, value=10)
    else:
        overlap_size = 0
else:
    n, k, p_in, p_out, overlap_size = 100, 5, 0.3, 0.05, 10

# T·∫£i d·ªØ li·ªáu
G, true_communities = load_dataset(dataset_name, n, k, overlap_size, p_in, p_out)

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ƒë·ªì th·ªã
if G:
    st.sidebar.info(f"ƒê·ªì th·ªã c√≥ {G.number_of_nodes()} ƒë·ªânh v√† {G.number_of_edges()} c·∫°nh")

# Ch·ªçn lo·∫°i thu·∫≠t to√°n
algorithm_type = st.sidebar.radio(
    "Lo·∫°i thu·∫≠t to√°n:",
    ["C·ªông ƒë·ªìng kh√¥ng ch·ªìng ch√©o", "C·ªông ƒë·ªìng ch·ªìng ch√©o"]
)

# Ch·ªçn thu·∫≠t to√°n c·ª• th·ªÉ
if algorithm_type == "C·ªông ƒë·ªìng kh√¥ng ch·ªìng ch√©o":
    algorithms = get_disjoint_algorithms()
    is_overlapping = False
else:
    algorithms = get_overlapping_algorithms()
    is_overlapping = True

algorithm_name = st.sidebar.selectbox(
    "Ch·ªçn thu·∫≠t to√°n:",
    list(algorithms.keys())
)

# Tham s·ªë cho thu·∫≠t to√°n
st.sidebar.subheader("Tham s·ªë thu·∫≠t to√°n")

algorithm_params = {}
if algorithm_name == "Girvan-Newman":
    num_communities = st.sidebar.slider("S·ªë l∆∞·ª£ng c·ªông ƒë·ªìng:", min_value=2, max_value=10, value=5)
    max_iter = st.sidebar.slider("S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa:", min_value=5, max_value=100, value=10)
    algorithm_params = {"num_communities": num_communities, "max_iter": max_iter}
elif algorithm_name in ["Spectral Clustering", "K-means", "Hierarchical Clustering"]:
    n_clusters = st.sidebar.slider("S·ªë l∆∞·ª£ng c·ªông ƒë·ªìng:", min_value=2, max_value=10, value=5)
    algorithm_params = {"n_clusters": n_clusters}
elif algorithm_name == "COPRA":
    v = st.sidebar.slider("S·ªë l∆∞·ª£ng c·ªông ƒë·ªìng t·ªëi ƒëa m·ªói ƒë·ªânh (v):", min_value=1, max_value=5, value=2)
    max_iter = st.sidebar.slider("S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa:", min_value=5, max_value=100, value=30)
    algorithm_params = {"v": v, "max_iter": max_iter}
elif algorithm_name in ["CONGA", "CONGO"]:
    num_communities = st.sidebar.slider("S·ªë l∆∞·ª£ng c·ªông ƒë·ªìng:", min_value=2, max_value=10, value=5)
    algorithm_params = {"num_communities": num_communities}
elif algorithm_name == "BIGCLAM":
    num_communities = st.sidebar.slider("S·ªë l∆∞·ª£ng c·ªông ƒë·ªìng:", min_value=2, max_value=10, value=5)
    algorithm_params = {"num_communities": num_communities}

# N√∫t th·ª±c thi
execute_button = st.sidebar.button("Th·ª±c thi thu·∫≠t to√°n")

if G is not None and execute_button:
    # T·∫°o hai c·ªôt
    col1, col2 = st.columns([3, 2])
    
    # Hi·ªÉn th·ªã ƒë·ªì th·ªã g·ªëc
    with col1:
        st.subheader("ƒê·ªì th·ªã g·ªëc")
        
        # T·∫°o ƒë·ªì th·ªã t∆∞∆°ng t√°c v·ªõi Plotly
        fig = visualize_interactive(G, {}, title="ƒê·ªì th·ªã g·ªëc", open_browser=False)
        st.plotly_chart(fig, use_container_width=True)
    
    # Ch·∫°y thu·∫≠t to√°n
    with st.spinner(f"ƒêang ch·∫°y thu·∫≠t to√°n {algorithm_name}..."):
        start_time = time.time()
        
        # Kh·ªüi t·∫°o v√† ch·∫°y thu·∫≠t to√°n
        algorithm_class = algorithms[algorithm_name]
        algorithm = algorithm_class(G)
        communities = algorithm.detect(**algorithm_params)
        
        end_time = time.time()
        execution_time = end_time - start_time
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    with col2:
        st.subheader("Th√¥ng tin k·∫øt qu·∫£")
        
        # T√≠nh c√°c ch·ªâ s·ªë ƒë√°nh gi√°
        mod = modularity(G, communities)
        cond = conductance(G, communities)
        
        # Hi·ªÉn th·ªã th√¥ng tin
        st.write(f"**Thu·∫≠t to√°n:** {algorithm_name}")
        
        if isinstance(communities, dict):
            num_communities = len(set(communities.values()))
        else:
            num_communities = len(communities)
            
        st.write(f"**S·ªë l∆∞·ª£ng c·ªông ƒë·ªìng ph√°t hi·ªán ƒë∆∞·ª£c:** {num_communities}")
        st.write(f"**Modularity:** {mod:.4f}")
        st.write(f"**Conductance (trung b√¨nh):** {cond['average']:.4f}")
        st.write(f"**Th·ªùi gian th·ª±c thi:** {execution_time:.4f} gi√¢y")
        
        # T√≠nh NMI v√† ARI n·∫øu c√≥ ground truth
        if true_communities is not None:
            if is_overlapping:
                if isinstance(true_communities, dict):
                    # Chuy·ªÉn t·ª´ dict sang list of sets
                    true_comm_dict = {}
                    for node, comm_id in true_communities.items():
                        if comm_id not in true_comm_dict:
                            true_comm_dict[comm_id] = set()
                        true_comm_dict[comm_id].add(node)
                    true_comm_list = list(true_comm_dict.values())
                else:
                    true_comm_list = true_communities
                
                onmi_score = overlapping_nmi(true_comm_list, communities)
                omega_score = omega_index(true_comm_list, communities)
                
                st.write(f"**Overlapping NMI:** {onmi_score:.4f}" if onmi_score else "**Overlapping NMI:** N/A")
                st.write(f"**Omega Index:** {omega_score:.4f}" if omega_score else "**Omega Index:** N/A")
            else:
                if isinstance(true_communities, list):
                    # Chuy·ªÉn t·ª´ list of sets sang dict
                    true_comm_dict = {}
                    for i, comm in enumerate(true_communities):
                        for node in comm:
                            true_comm_dict[node] = i
                    true_communities = true_comm_dict
                
                # L·ªçc c√°c ƒë·ªânh chung
                common_nodes = set(true_communities.keys()) & set(communities.keys())
                if common_nodes:
                    filtered_true = {node: true_communities[node] for node in common_nodes}
                    filtered_pred = {node: communities[node] for node in common_nodes}
                    
                    nmi_score = nmi(filtered_true, filtered_pred)
                    ari_score = ari(filtered_true, filtered_pred)
                    
                    st.write(f"**NMI:** {nmi_score:.4f}")
                    st.write(f"**ARI:** {ari_score:.4f}")
    
    # Hi·ªÉn th·ªã ƒë·ªì th·ªã v·ªõi c·ªông ƒë·ªìng
    with col1:
        st.subheader("K·∫øt qu·∫£ ph√°t hi·ªán c·ªông ƒë·ªìng")
        
        # T·∫°o ƒë·ªì th·ªã t∆∞∆°ng t√°c v·ªõi Plotly
        fig = visualize_interactive(G, communities, title=f"K·∫øt qu·∫£ {algorithm_name}", 
                                  is_overlapping=is_overlapping, open_browser=False)
        st.plotly_chart(fig, use_container_width=True)
        
        # Hi·ªÉn th·ªã ph√¢n ph·ªëi k√≠ch th∆∞·ªõc c·ªông ƒë·ªìng
        st.subheader("Ph√¢n ph·ªëi k√≠ch th∆∞·ªõc c·ªông ƒë·ªìng")
        
        if isinstance(communities, dict):
            # T√≠nh k√≠ch th∆∞·ªõc m·ªói c·ªông ƒë·ªìng
            community_sizes = {}
            for node, comm_id in communities.items():
                if isinstance(comm_id, (set, frozenset)):
                    for c in comm_id:
                        if c not in community_sizes:
                            community_sizes[c] = 0
                        community_sizes[c] += 1
                else:
                    if comm_id not in community_sizes:
                        community_sizes[comm_id] = 0
                    community_sizes[comm_id] += 1
        else:
            # communities l√† list of sets
            community_sizes = {i: len(comm) for i, comm in enumerate(communities)}
        
        # T·∫°o dataframe
        df_sizes = pd.DataFrame({
            'C·ªông ƒë·ªìng': list(community_sizes.keys()),
            'K√≠ch th∆∞·ªõc': list(community_sizes.values())
        })
        
        # V·∫Ω bi·ªÉu ƒë·ªì
        fig = px.bar(df_sizes, x='C·ªông ƒë·ªìng', y='K√≠ch th∆∞·ªõc', 
                    title='K√≠ch th∆∞·ªõc c√°c c·ªông ƒë·ªìng')
        st.plotly_chart(fig, use_container_width=True)
        
else:
    # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
    st.info("Ch·ªçn b·ªô d·ªØ li·ªáu v√† thu·∫≠t to√°n t·ª´ thanh b√™n, sau ƒë√≥ nh·∫•n n√∫t 'Th·ª±c thi thu·∫≠t to√°n' ƒë·ªÉ xem k·∫øt qu·∫£.")
    
    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c thu·∫≠t to√°n
    st.subheader("Th√¥ng tin v·ªÅ c√°c thu·∫≠t to√°n")
    
    st.markdown("""
    ### Thu·∫≠t to√°n ph√°t hi·ªán c·ªông ƒë·ªìng kh√¥ng ch·ªìng ch√©o
    
    1. **Girvan-Newman**: Thu·∫≠t to√°n d·ª±a tr√™n ph√¢n chia m·∫°ng b·∫±ng c√°ch l·∫∑p ƒëi l·∫∑p l·∫°i vi·ªác lo·∫°i b·ªè c√°c c·∫°nh c√≥ ƒë·ªô trung gian cao nh·∫•t.
    
    2. **Louvain**: Thu·∫≠t to√°n t·ªëi ∆∞u h√≥a modularity th√¥ng qua ph∆∞∆°ng ph√°p tham lam.
    
    3. **Spectral Clustering**: S·ª≠ d·ª•ng vector ri√™ng c·ªßa ma tr·∫≠n Laplacian c·ªßa ƒë·ªì th·ªã ƒë·ªÉ ph√¢n c·ª•m.
    
    4. **K-means**: √Åp d·ª•ng thu·∫≠t to√°n K-means l√™n ma tr·∫≠n k·ªÅ c·ªßa ƒë·ªì th·ªã.
    
    5. **Hierarchical Clustering**: Ph√¢n c·ª•m ph√¢n c·∫•p d·ª±a tr√™n kho·∫£ng c√°ch gi·ªØa c√°c ƒë·ªânh.
    
    6. **Label Propagation**: Ph√°t hi·ªán c·ªông ƒë·ªìng b·∫±ng c√°ch lan truy·ªÅn nh√£n gi·ªØa c√°c ƒë·ªânh.
    
    7. **Infomap**: S·ª≠ d·ª•ng l√Ω thuy·∫øt th√¥ng tin ƒë·ªÉ ph√°t hi·ªán c·ªông ƒë·ªìng t·ªët nh·∫•t.
    
    ### Thu·∫≠t to√°n ph√°t hi·ªán c·ªông ƒë·ªìng ch·ªìng ch√©o
    
    1. **CONGA (Cluster-Overlap Newman Girvan Algorithm)**: M·ªü r·ªông thu·∫≠t to√°n Girvan-Newman ƒë·ªÉ ph√°t hi·ªán c·ªông ƒë·ªìng ch·ªìng ch√©o.
    
    2. **CONGO (CONGA Optimized)**: Phi√™n b·∫£n t·ªëi ∆∞u h√≥a c·ªßa CONGA, s·ª≠ d·ª•ng trung gian c·ª•c b·ªô thay v√¨ to√†n c·ª•c.
    
    3. **COPRA (Community Overlap PRopagation Algorithm)**: M·ªü r·ªông thu·∫≠t to√°n lan truy·ªÅn nh√£n cho c·ªông ƒë·ªìng ch·ªìng ch√©o.
    
    4. **BIGCLAM (Cluster Affiliation Model for Big Networks)**: S·ª≠ d·ª•ng m√¥ h√¨nh x√°c su·∫•t ƒë·ªÉ ph√°t hi·ªán c·ªông ƒë·ªìng ch·ªìng ch√©o.
    """)
    
    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ƒë·ªô ƒëo
    st.subheader("C√°c ƒë·ªô ƒëo ƒë√°nh gi√°")
    
    st.markdown("""
    ### ƒê·ªô ƒëo ƒë√°nh gi√° b√™n trong (Internal)
    
    1. **Modularity**: ƒêo l∆∞·ªùng ch·∫•t l∆∞·ª£ng c·ªßa vi·ªác chia m·∫°ng th√†nh c√°c c·ªông ƒë·ªìng. Gi√° tr·ªã cao h∆°n cho th·∫•y c·∫•u tr√∫c c·ªông ƒë·ªìng t·ªët h∆°n.
    
    2. **Conductance**: ƒêo l∆∞·ªùng t·ª∑ l·ªá gi·ªØa s·ªë c·∫°nh ƒëi ra ngo√†i c·ªông ƒë·ªìng so v·ªõi t·ªïng s·ªë c·∫°nh. Gi√° tr·ªã th·∫•p h∆°n t·ªët h∆°n.
    
    ### ƒê·ªô ƒëo ƒë√°nh gi√° b√™n ngo√†i (External)
    
    1. **NMI (Normalized Mutual Information)**: ƒêo l∆∞·ªùng m·ª©c ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa hai ph√¢n ho·∫°ch. Gi√° tr·ªã t·ª´ 0 ƒë·∫øn 1, 1 l√† t·ªët nh·∫•t.
    
    2. **ARI (Adjusted Rand Index)**: ƒêo l∆∞·ªùng s·ª± t∆∞∆°ng ƒë·ªìng gi·ªØa hai ph√¢n ho·∫°ch, ƒë√£ ƒëi·ªÅu ch·ªânh cho ng·∫´u nhi√™n. Gi√° tr·ªã t·ª´ -1 ƒë·∫øn 1, 1 l√† t·ªët nh·∫•t.
    
    3. **Overlapping NMI**: Phi√™n b·∫£n c·ªßa NMI cho c·ªông ƒë·ªìng ch·ªìng ch√©o.
    
    4. **Omega Index**: M·ªü r·ªông c·ªßa ARI cho c·ªông ƒë·ªìng ch·ªìng ch√©o.
    """)

# Footer
st.markdown("---")
st.markdown("Ph√°t hi·ªán c·ªông ƒë·ªìng trong m·∫°ng x√£ h·ªôi - Demo AI") 